Question Étape 3: 49 lignes(ajoutées/modifiées), j'ai dû faire du refactoring et ajouter un test pour l'étape d'avant.Mais si je n'avais pas eu à faire ça, j'aurais probablement seulement dû modifier un seul test (celui pu le patient est deuxième dans la liste de radiologie pour qu'il test maintenant s'il est premier) et quelques lignes dans la méthode de triage.

Question Étape 4: Environ 200 lignes de codes. Ce grand nombre est dû au fait que j'ai extrait une interface de la classe clinique pour faire en sorte que le contre communautaire soit une implémentation de cet interface. J'ai aussi réeutilisé les mêmes tests que pour Clinic(en changeant les instances de Clinic Pour Community Center dans les tests) pour tester la nouvelle classe. Il y a donc moins de méthode dans la nouvelle classe(pas de radiologyWaitingList donc pas de setter/getter/getFirstElement). La classe Clinic possède, selon moi, 2 comportements mais possède 12 tests, ce qui est 6x plus de test que de comportment. Mes tests sont basés sur les scénarios donnés dans l'énoncé donc peut-être que j'en ai trop mis. Il serait intéressant de faire un refactoring des tests plus tard dans le code.

Question Étape 5: 288 lignes de tests environ vs 196 lignes de production. Selon moi, mes tests pourraient être un peu moins long(réutiliser certaine structure pour des groupes de test sans la déclarer au début de chaque test unitaire) mais je pense que ma couverture de code et le code lui même sont assez solide. J'ai essayer le plus possible d'utiliser le TDD lors de ce travail mais je ne suis pas encore 100% à l'aise avec cette discipline. Je crois tout de même que le fait d'avoir plus de lignes de tests que de ligne de code de production n'est pas nécéraiment une mauvaise chose, au contraire, cela peut être un signe que l'écriture des tests nous a simplifiés la vie et empêcher d'écrire du code de production inutile.
 





